-----Newly modified files-----
-> MessageBus.cpp & .h : changed the type of function the method handle can
take as argument (function takes now an additional void* as argument).
Useful for callbacks with ROS on CS. Doesn't change how it is used on 
other subsystems.
-> Protocol21W3, ProtocolRegisters, NetworkBus: Modified for different Protocol.
-> Files that aren't of RoCo are basically just test files. 

-----Important files in the folder (for CS simulation)-----

1) avionics.cpp : simulation of the avionics part of the RoCo communication
graph.

2) interface.cpp, handlers.h : interface between avionics and control station
node. handlers file contains how to handle packets received on RoCo and
transmit them to control station through ROS.

3) cs.py, callbacks.py : simulation of the control station node. callbacks
contains callback functions to message received through subscribed topics.

-----To add a new packet-----

1) Write the packet in the protocol file  (e.g. Protocol21W3.h), i.e. create
a structure and fill it with the needed variables.
Example:

struct DataPacket {
	uint32_t data;
} __attribute__((packed));

Don't forget to add the suffix "__attribute__((packed))".

2) Define the packet in the class initialization in the NetworkBus.cpp file
and don't forget to add its id (must be different than the ids of the other
packets and smaller than 64).
Example:

define<DataPacket>(32);

3) Register the packet by adding it to the file ProtocolRegisters.h in the
correctly defined protocol (between #ifdef PROTOCOL_21W3 and #endif).
Example:

REGISTER(DataPacket)

4) All done ! Enjoy using your newly designed packet.
