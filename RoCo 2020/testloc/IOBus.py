# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IOBus
else:
    import _IOBus

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class IODriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IOBus.delete_IODriver

    def receive(self, receiver):
        return _IOBus.IODriver_receive(self, receiver)

    def transmit(self, buffer, length):
        return _IOBus.IODriver_transmit(self, buffer, length)

# Register IODriver in _IOBus:
_IOBus.IODriver_swigregister(IODriver)

class PacketDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_IOBus.PacketDefinition_id_get, _IOBus.PacketDefinition_id_set)
    size = property(_IOBus.PacketDefinition_size_get, _IOBus.PacketDefinition_size_set)
    type = property(_IOBus.PacketDefinition_type_get, _IOBus.PacketDefinition_type_set)

    def __init__(self):
        _IOBus.PacketDefinition_swiginit(self, _IOBus.new_PacketDefinition())
    __swig_destroy__ = _IOBus.delete_PacketDefinition

# Register PacketDefinition in _IOBus:
_IOBus.PacketDefinition_swigregister(PacketDefinition)
cvar = _IOBus.cvar
null_type = cvar.null_type

class MessageBus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IOBus.delete_MessageBus

# Register MessageBus in _IOBus:
_IOBus.MessageBus_swigregister(MessageBus)

class IOBus(MessageBus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driver, buffer, length):
        _IOBus.IOBus_swiginit(self, _IOBus.new_IOBus(driver, buffer, length))
    __swig_destroy__ = _IOBus.delete_IOBus

# Register IOBus in _IOBus:
_IOBus.IOBus_swigregister(IOBus)



