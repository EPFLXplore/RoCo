# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RoCo
else:
    import _RoCo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class PingPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    time = property(_RoCo.PingPacket_time_get, _RoCo.PingPacket_time_set)

    def __init__(self):
        _RoCo.PingPacket_swiginit(self, _RoCo.new_PingPacket())
    __swig_destroy__ = _RoCo.delete_PingPacket

# Register PingPacket in _RoCo:
_RoCo.PingPacket_swigregister(PingPacket)

class ConnectPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RoCo.ConnectPacket_name_get, _RoCo.ConnectPacket_name_set)

    def __init__(self):
        _RoCo.ConnectPacket_swiginit(self, _RoCo.new_ConnectPacket())
    __swig_destroy__ = _RoCo.delete_ConnectPacket

# Register ConnectPacket in _RoCo:
_RoCo.ConnectPacket_swigregister(ConnectPacket)

class DisconnectPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RoCo.DisconnectPacket_swiginit(self, _RoCo.new_DisconnectPacket())
    __swig_destroy__ = _RoCo.delete_DisconnectPacket

# Register DisconnectPacket in _RoCo:
_RoCo.DisconnectPacket_swigregister(DisconnectPacket)

class RequestPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    uuid = property(_RoCo.RequestPacket_uuid_get, _RoCo.RequestPacket_uuid_set)
    action_id = property(_RoCo.RequestPacket_action_id_get, _RoCo.RequestPacket_action_id_set)
    target_id = property(_RoCo.RequestPacket_target_id_get, _RoCo.RequestPacket_target_id_set)
    payload = property(_RoCo.RequestPacket_payload_get, _RoCo.RequestPacket_payload_set)

    def __init__(self):
        _RoCo.RequestPacket_swiginit(self, _RoCo.new_RequestPacket())
    __swig_destroy__ = _RoCo.delete_RequestPacket

# Register RequestPacket in _RoCo:
_RoCo.RequestPacket_swigregister(RequestPacket)

class AcknowledgePacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    uuid = property(_RoCo.AcknowledgePacket_uuid_get, _RoCo.AcknowledgePacket_uuid_set)
    result = property(_RoCo.AcknowledgePacket_result_get, _RoCo.AcknowledgePacket_result_set)

    def __init__(self):
        _RoCo.AcknowledgePacket_swiginit(self, _RoCo.new_AcknowledgePacket())
    __swig_destroy__ = _RoCo.delete_AcknowledgePacket

# Register AcknowledgePacket in _RoCo:
_RoCo.AcknowledgePacket_swigregister(AcknowledgePacket)

class ResponsePacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    uuid = property(_RoCo.ResponsePacket_uuid_get, _RoCo.ResponsePacket_uuid_set)
    action_id = property(_RoCo.ResponsePacket_action_id_get, _RoCo.ResponsePacket_action_id_set)
    target_id = property(_RoCo.ResponsePacket_target_id_get, _RoCo.ResponsePacket_target_id_set)
    payload = property(_RoCo.ResponsePacket_payload_get, _RoCo.ResponsePacket_payload_set)

    def __init__(self):
        _RoCo.ResponsePacket_swiginit(self, _RoCo.new_ResponsePacket())
    __swig_destroy__ = _RoCo.delete_ResponsePacket

# Register ResponsePacket in _RoCo:
_RoCo.ResponsePacket_swigregister(ResponsePacket)

class ProgressPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    uuid = property(_RoCo.ProgressPacket_uuid_get, _RoCo.ProgressPacket_uuid_set)
    progress = property(_RoCo.ProgressPacket_progress_get, _RoCo.ProgressPacket_progress_set)

    def __init__(self):
        _RoCo.ProgressPacket_swiginit(self, _RoCo.new_ProgressPacket())
    __swig_destroy__ = _RoCo.delete_ProgressPacket

# Register ProgressPacket in _RoCo:
_RoCo.ProgressPacket_swigregister(ProgressPacket)

class DataPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_RoCo.DataPacket_data_get, _RoCo.DataPacket_data_set)

    def __init__(self):
        _RoCo.DataPacket_swiginit(self, _RoCo.new_DataPacket())
    __swig_destroy__ = _RoCo.delete_DataPacket

# Register DataPacket in _RoCo:
_RoCo.DataPacket_swigregister(DataPacket)

class MessagePacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    message = property(_RoCo.MessagePacket_message_get, _RoCo.MessagePacket_message_set)

    def __init__(self):
        _RoCo.MessagePacket_swiginit(self, _RoCo.new_MessagePacket())
    __swig_destroy__ = _RoCo.delete_MessagePacket

# Register MessagePacket in _RoCo:
_RoCo.MessagePacket_swigregister(MessagePacket)

class ErrorPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    error_id = property(_RoCo.ErrorPacket_error_id_get, _RoCo.ErrorPacket_error_id_set)

    def __init__(self):
        _RoCo.ErrorPacket_swiginit(self, _RoCo.new_ErrorPacket())
    __swig_destroy__ = _RoCo.delete_ErrorPacket

# Register ErrorPacket in _RoCo:
_RoCo.ErrorPacket_swigregister(ErrorPacket)

class IODriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoCo.delete_IODriver

    def receive(self, receiver: "std::function< void (uint8_t,uint8_t *,uint32_t) > const &") -> "void":
        return _RoCo.IODriver_receive(self, receiver)

    def transmit(self, buffer: "uint8_t *", length: "uint32_t") -> "void":
        return _RoCo.IODriver_transmit(self, buffer, length)

# Register IODriver in _RoCo:
_RoCo.IODriver_swigregister(IODriver)

class NetworkClientIO(IODriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, address: "std::string", port: "uint16_t"):
        _RoCo.NetworkClientIO_swiginit(self, _RoCo.new_NetworkClientIO(address, port))
    __swig_destroy__ = _RoCo.delete_NetworkClientIO

    def connectClient(self) -> "int8_t":
        return _RoCo.NetworkClientIO_connectClient(self)

    def disconnectClient(self) -> "void":
        return _RoCo.NetworkClientIO_disconnectClient(self)

    def receive(self, receiver: "std::function< void (uint8_t,uint8_t *,uint32_t) > const &") -> "void":
        return _RoCo.NetworkClientIO_receive(self, receiver)

    def transmit(self, buffer: "uint8_t *", length: "uint32_t") -> "void":
        return _RoCo.NetworkClientIO_transmit(self, buffer, length)

# Register NetworkClientIO in _RoCo:
_RoCo.NetworkClientIO_swigregister(NetworkClientIO)

class PacketDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_RoCo.PacketDefinition_id_get, _RoCo.PacketDefinition_id_set)
    size = property(_RoCo.PacketDefinition_size_get, _RoCo.PacketDefinition_size_set)
    hash = property(_RoCo.PacketDefinition_hash_get, _RoCo.PacketDefinition_hash_set)

    def __init__(self):
        _RoCo.PacketDefinition_swiginit(self, _RoCo.new_PacketDefinition())
    __swig_destroy__ = _RoCo.delete_PacketDefinition

# Register PacketDefinition in _RoCo:
_RoCo.PacketDefinition_swigregister(PacketDefinition)
cvar = _RoCo.cvar
null_type = cvar.null_type

class MessageBus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoCo.delete_MessageBus

    def definePingPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_definePingPacket(self, identifier)

    def handlePingPacket(self, handler: "void (*)(uint8_t,PingPacket *)") -> "bool":
        return _RoCo.MessageBus_handlePingPacket(self, handler)

    def forwardPingPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardPingPacket(self, bus)

    def sendPingPacket(self, message: "PingPacket") -> "bool":
        return _RoCo.MessageBus_sendPingPacket(self, message)

    def defineConnectPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineConnectPacket(self, identifier)

    def handleConnectPacket(self, handler: "void (*)(uint8_t,ConnectPacket *)") -> "bool":
        return _RoCo.MessageBus_handleConnectPacket(self, handler)

    def forwardConnectPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardConnectPacket(self, bus)

    def sendConnectPacket(self, message: "ConnectPacket") -> "bool":
        return _RoCo.MessageBus_sendConnectPacket(self, message)

    def defineDisconnectPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineDisconnectPacket(self, identifier)

    def handleDisconnectPacket(self, handler: "void (*)(uint8_t,DisconnectPacket *)") -> "bool":
        return _RoCo.MessageBus_handleDisconnectPacket(self, handler)

    def forwardDisconnectPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardDisconnectPacket(self, bus)

    def sendDisconnectPacket(self, message: "DisconnectPacket") -> "bool":
        return _RoCo.MessageBus_sendDisconnectPacket(self, message)

    def defineRequestPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineRequestPacket(self, identifier)

    def handleRequestPacket(self, handler: "void (*)(uint8_t,RequestPacket *)") -> "bool":
        return _RoCo.MessageBus_handleRequestPacket(self, handler)

    def forwardRequestPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardRequestPacket(self, bus)

    def sendRequestPacket(self, message: "RequestPacket") -> "bool":
        return _RoCo.MessageBus_sendRequestPacket(self, message)

    def defineAcknowledgePacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineAcknowledgePacket(self, identifier)

    def handleAcknowledgePacket(self, handler: "void (*)(uint8_t,AcknowledgePacket *)") -> "bool":
        return _RoCo.MessageBus_handleAcknowledgePacket(self, handler)

    def forwardAcknowledgePacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardAcknowledgePacket(self, bus)

    def sendAcknowledgePacket(self, message: "AcknowledgePacket") -> "bool":
        return _RoCo.MessageBus_sendAcknowledgePacket(self, message)

    def defineResponsePacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineResponsePacket(self, identifier)

    def handleResponsePacket(self, handler: "void (*)(uint8_t,ResponsePacket *)") -> "bool":
        return _RoCo.MessageBus_handleResponsePacket(self, handler)

    def forwardResponsePacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardResponsePacket(self, bus)

    def sendResponsePacket(self, message: "ResponsePacket") -> "bool":
        return _RoCo.MessageBus_sendResponsePacket(self, message)

    def defineProgressPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineProgressPacket(self, identifier)

    def handleProgressPacket(self, handler: "void (*)(uint8_t,ProgressPacket *)") -> "bool":
        return _RoCo.MessageBus_handleProgressPacket(self, handler)

    def forwardProgressPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardProgressPacket(self, bus)

    def sendProgressPacket(self, message: "ProgressPacket") -> "bool":
        return _RoCo.MessageBus_sendProgressPacket(self, message)

    def defineDataPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineDataPacket(self, identifier)

    def handleDataPacket(self, handler: "void (*)(uint8_t,DataPacket *)") -> "bool":
        return _RoCo.MessageBus_handleDataPacket(self, handler)

    def forwardDataPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardDataPacket(self, bus)

    def sendDataPacket(self, message: "DataPacket") -> "bool":
        return _RoCo.MessageBus_sendDataPacket(self, message)

    def defineMessagePacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineMessagePacket(self, identifier)

    def handleMessagePacket(self, handler: "void (*)(uint8_t,MessagePacket *)") -> "bool":
        return _RoCo.MessageBus_handleMessagePacket(self, handler)

    def forwardMessagePacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardMessagePacket(self, bus)

    def sendMessagePacket(self, message: "MessagePacket") -> "bool":
        return _RoCo.MessageBus_sendMessagePacket(self, message)

    def defineErrorPacket(self, identifier: "uint8_t") -> "bool":
        return _RoCo.MessageBus_defineErrorPacket(self, identifier)

    def handleErrorPacket(self, handler: "void (*)(uint8_t,ErrorPacket *)") -> "bool":
        return _RoCo.MessageBus_handleErrorPacket(self, handler)

    def forwardErrorPacket(self, bus: "MessageBus") -> "bool":
        return _RoCo.MessageBus_forwardErrorPacket(self, bus)

    def sendErrorPacket(self, message: "ErrorPacket") -> "bool":
        return _RoCo.MessageBus_sendErrorPacket(self, message)

# Register MessageBus in _RoCo:
_RoCo.MessageBus_swigregister(MessageBus)

class IOBus(MessageBus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driver: "IODriver", buffer: "uint8_t *", length: "uint32_t"):
        _RoCo.IOBus_swiginit(self, _RoCo.new_IOBus(driver, buffer, length))
    __swig_destroy__ = _RoCo.delete_IOBus

# Register IOBus in _RoCo:
_RoCo.IOBus_swigregister(IOBus)

NETWORK_FRAME_SIZE = _RoCo.NETWORK_FRAME_SIZE
class NetworkBus(IOBus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driver: "IODriver"):
        _RoCo.NetworkBus_swiginit(self, _RoCo.new_NetworkBus(driver))
    __swig_destroy__ = _RoCo.delete_NetworkBus

# Register NetworkBus in _RoCo:
_RoCo.NetworkBus_swigregister(NetworkBus)



